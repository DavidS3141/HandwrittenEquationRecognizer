clear;
close all;

%% load training data
load('../data/extract/trainData.mat');

%% reduce data dimensionality

ynn = y;
Xnn = X;

disp('Reduce input size')
[COEFF,Xnn] = pca(Xnn,'NumComponents', 48);

% imageList = reshape(Xnn,[size(Xnn,1),32,32]);
% Xnn = zeros(size(Xnn,1),64);
% for i=1:size(Xnn,1)
%     Xnn(i,:)=reshape(imresize(reshape(imageList(i,:,:),[32 32]),[8 8]),[1 64]);
% end

ynn = (1:max(ynn) == ynn);

Xnn = Xnn';
ynn = ynn';

%% train neural network

% Solve a Pattern Recognition Problem with a Neural Network
% Script generated by Neural Pattern Recognition app
% Created 17-May-2017 16:14:19
%
% This script assumes these variables are defined:
%
%   Xnn - input data.
%   ynn - target data.

x = Xnn;
t = ynn;

% Choose a Training Function
% For a list of all training functions type: help nntrain
% 'trainlm' is usually fastest.
% 'trainbr' takes longer but may be better for challenging problems.
% 'trainscg' uses less memory. Suitable in low memory situations.
trainFcn = 'trainscg';  % Scaled conjugate gradient backpropagation.

% Create a Pattern Recognition Network
hiddenLayerSize = 150;
net = patternnet(hiddenLayerSize, trainFcn);

% Setup Division of Data for Training, Validation, Testing
net.divideParam.trainRatio = 30/100;
net.divideParam.valRatio = 35/100;
net.divideParam.testRatio = 35/100;

% Train the Network
[net,tr] = train(net,x,t);

% Test the Network
y = net(x);
e = gsubtract(t,y);
performance = perform(net,t,y)
tind = vec2ind(t);
yind = vec2ind(y);
percentErrors = sum(tind ~= yind)/numel(tind);

% View the Network
view(net)

% Plots
% Uncomment these lines to enable various plots.
figure, plotperform(tr)
figure, plottrainstate(tr)
figure, ploterrhist(e)
%figure, plotconfusion(t,y)
figure, plotroc(t,y)