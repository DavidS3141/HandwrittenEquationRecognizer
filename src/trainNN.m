clear;
close all;

%% load training data
load('../data/extract/trainData.mat');

%% reduce data dimensionality

y = y(1:1:end);
X = X(1:1:end,:);

disp('Reduce input size')
[COEFF,~,~,~,explained,mu] = pca(X(1:2:end,:),'NumComponents', 48);
X = (X-mu)*COEFF;

%imageList = reshape(X,[size(X,1),32,32]);
%X = zeros(size(X,1),64);
%for i=1:size(X,1)
%    X(i,:)=reshape(imresize(reshape(imageList(i,:,:),[32 32]),[8 8]),[1 64]);
%end

y = (1:max(y) == y);

X = X';
y = y';

%% train neural network

% Solve a Pattern Recognition Problem with a Neural Network
% Script generated by Neural Pattern Recognition app
% Created 17-May-2017 16:14:19
%
% This script assumes these variables are defined:
%
%   X - input data.
%   y - target data.

% Choose a Training Function
% For a list of all training functions type: help nntrain
% 'trainlm' is usually fastest.
% 'trainbr' takes longer but may be better for challenging problems.
% 'trainscg' uses less memory. Suitable in low memory situations.
trainFcn = 'trainscg';  % Scaled conjugate gradient backpropagation.

% Create a Pattern Recognition Network
hiddenLayerSize = 150;
net = patternnet(hiddenLayerSize, trainFcn);

% Setup Division of Data for Training, Validation, Testing
net.divideFcn = 'divideint';
net.divideParam.trainRatio = 80/100;
net.divideParam.valRatio = 10/100;
net.divideParam.testRatio = 10/100;

% Train the Network
[net,tr] = train(net,X,y);

save('allNetData.mat');

% Test the Network
Xtest = X(:,tr.testInd);
ytest = y(:,tr.testInd);
yhat = net(Xtest);
e = gsubtract(ytest,yhat);
performance = perform(net,ytest,yhat);
yind = vec2ind(ytest);
yhatind = vec2ind(yhat);
percentErrors = sum(yind ~= yhatind)/numel(yind);

% View the Network
% view(net)

% Plots
% Uncomment these lines to enable various plots.
figure, plotperform(tr)
figure, plottrainstate(tr)
figure, ploterrhist(e)
% figure, plotconfusion(ytest,yhat)
figure, plotroc(ytest,yhat)